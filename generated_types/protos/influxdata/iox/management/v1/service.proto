syntax = "proto3";
package influxdata.iox.management.v1;
option go_package = "github.com/influxdata/iox/management/v1";

import "google/longrunning/operations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "influxdata/iox/management/v1/database_rules.proto";
import "influxdata/iox/management/v1/chunk.proto";
import "influxdata/iox/management/v1/partition.proto";

service ManagementService {
  // List all databases on this server.
  //
  // Roughly follows the <https://google.aip.dev/132> pattern, except we wrap the response
  rpc ListDatabases(ListDatabasesRequest) returns (ListDatabasesResponse);

  // Return a specific database by name
  //
  // Roughly follows the <https://google.aip.dev/131> pattern, except
  // we wrap the response
  rpc GetDatabase(GetDatabaseRequest) returns (GetDatabaseResponse);

  rpc CreateDatabase(CreateDatabaseRequest) returns (CreateDatabaseResponse);

  // Update a database.
  //
  // Roughly follows the <https://google.aip.dev/134> pattern, except we wrap the response
  rpc UpdateDatabase(UpdateDatabaseRequest) returns (UpdateDatabaseResponse);

  // Release a database from its current server.
  rpc ReleaseDatabase(ReleaseDatabaseRequest) returns (ReleaseDatabaseResponse);

  // Claim a released database.
  rpc ClaimDatabase(ClaimDatabaseRequest) returns (ClaimDatabaseResponse);

  // List chunks available on this database
  rpc ListChunks(ListChunksRequest) returns (ListChunksResponse);

  // Creates a dummy job that for each value of the nanos field
  // spawns a task that sleeps for that number of nanoseconds before returning
  rpc CreateDummyJob(CreateDummyJobRequest) returns (CreateDummyJobResponse) {
    option (google.longrunning.operation_info) = {
      response_type: "google.protobuf.Empty"
      metadata_type: "OperationMetadata"
    };
  }

  // List partitions in a database
  rpc ListPartitions(ListPartitionsRequest) returns (ListPartitionsResponse);

  // Get detail information about a partition
  rpc GetPartition(GetPartitionRequest) returns (GetPartitionResponse);

  // List chunks in a partition
  rpc ListPartitionChunks(ListPartitionChunksRequest) returns (ListPartitionChunksResponse);

  // Create a new chunk in the mutable buffer
  rpc NewPartitionChunk(NewPartitionChunkRequest) returns (NewPartitionChunkResponse);

  // Close a chunk and move it to the read buffer
  rpc ClosePartitionChunk(ClosePartitionChunkRequest) returns (ClosePartitionChunkResponse);

  // Unload chunk from read buffer but keep it in object store
  rpc UnloadPartitionChunk(UnloadPartitionChunkRequest) returns (UnloadPartitionChunkResponse);

  // Load chunk from object store into read buffer
  rpc LoadPartitionChunk(LoadPartitionChunkRequest) returns (LoadPartitionChunkResponse);

  // Get server status
  rpc GetServerStatus(GetServerStatusRequest) returns (GetServerStatusResponse);

  // Rebuild preserved catalog from parquet files for given DB
  rpc RebuildPreservedCatalog(RebuildPreservedCatalogRequest) returns (RebuildPreservedCatalogResponse);

  // Wipe preserved catalog for given DB.
  rpc WipePreservedCatalog(WipePreservedCatalogRequest) returns (WipePreservedCatalogResponse);

  // Skip replay for given DB.
  rpc SkipReplay(SkipReplayRequest) returns (SkipReplayResponse);

  // Persist given partition.
  //
  // Errors if there is nothing to persist at the moment as per the lifecycle rules. If successful it returns the
  // chunk that contains the persisted data.
  rpc PersistPartition(PersistPartitionRequest) returns (PersistPartitionResponse);

  // Drop partition from memory and (if persisted) from object store.
  rpc DropPartition(DropPartitionRequest) returns (DropPartitionResponse);

  // Compact given object store chunks
  //
  // Errors if the chunks are not compacted yet and not contiguous
  rpc CompactObjectStoreChunks(CompactObjectStoreChunksRequest) returns (CompactObjectStoreChunksResponse);

  // Compact all object store chunks of a given partition
  //
  rpc CompactObjectStorePartition(CompactObjectStorePartitionRequest) returns (CompactObjectStorePartitionResponse);
}

message ListDatabasesRequest {
  // If true, returns only explicitly defined values. See additional
  // details on `GetDatabaseRequest`.
  bool omit_defaults = 1;
}

message ListDatabasesResponse {
  // old version of this API returned names only.
  // repeated string names = 1;

  /// database rules (configuration) for each database
  repeated DatabaseRules rules = 2;
}

message GetDatabaseRequest {
  // The name of the database to retrieve
  string name = 1;

  // If false: return the current configuration that is being used by
  // the server, with all server-side default values filled in.
  //
  // If true, returns only the persisted configuration (aka only
  // fields which were was supplied when the database was created or
  // last modified via UpdateDatabase)
  bool omit_defaults = 2;
}

message GetDatabaseResponse {
  DatabaseRules rules = 1;
}

message CreateDatabaseRequest {
  DatabaseRules rules = 1;
}

message CreateDatabaseResponse {
  bytes uuid = 1;
}

// Update a database.
message UpdateDatabaseRequest {
  // The rule's `name` field is used to identify the database rules to be updated.
  DatabaseRules rules = 1;
}

message UpdateDatabaseResponse {
  DatabaseRules rules = 1;
}

message ReleaseDatabaseRequest {
  // the name of the database
  string db_name = 1;

  // the optional UUID of the database that must match
  bytes uuid = 2;
}

message ReleaseDatabaseResponse {
  bytes uuid = 1;
}

message ClaimDatabaseRequest {
  bytes uuid = 1;

  // Force this server to claim this database, even if it is
  // ostensibly owned by another server.
  //
  // WARNING: ONLY do this if no other servers are writing to this
  // database (for example, the data files have been copied
  // somewhere). If another server is currently writing to this
  // database, corruption will very likely occur
  bool force = 2;
}

message ClaimDatabaseResponse {
  string db_name = 1;
}

message ListChunksRequest {
  // the name of the database
  string db_name = 1;
}

message ListChunksResponse {
  repeated Chunk chunks = 1;
}

message CreateDummyJobRequest {
  repeated uint64 nanos = 1;
}

message CreateDummyJobResponse {
  google.longrunning.Operation operation = 1;
}

// Request to list all partitions from a named database
message ListPartitionsRequest {
  // the name of the database
  string db_name = 1;
}

message ListPartitionsResponse {
  // All partitions in a database
  repeated Partition partitions = 1;
}

// Request to list all chunks in a specific partitions from a named database
message ListPartitionChunksRequest {
  // the name of the database
  string db_name = 1;

  // the partition key
  string partition_key = 2;
}

message GetPartitionResponse {
  // Detailed information about a partition
  Partition partition = 1;
}

message ListPartitionChunksResponse {
  // All chunks in a partition
  repeated Chunk chunks = 1;
}

// Request to get details of a specific partition from a named database
message GetPartitionRequest {
  // the name of the database
  string db_name = 1;

  // the partition key
  string partition_key = 2;
}

// Request that a new chunk for writing is created in the mutable buffer
message NewPartitionChunkRequest {
  // the name of the database
  string db_name = 1;

  // the partition key
  string partition_key = 2;

  // the table name
  string table_name = 3;
}

message NewPartitionChunkResponse {
}

// Request that a chunk be closed and moved to the read buffer
message ClosePartitionChunkRequest {
  // the name of the database
  string db_name = 1;

  // the partition key
  string partition_key = 2;

  // the table name
  string table_name = 4;

  // Was uint32-based chunk ID.
  reserved 3;

  // the chunk id
  //
  // UUID is stored as 16 bytes in big-endian order.
  bytes chunk_id = 5;
}

message ClosePartitionChunkResponse {
  // The operation that tracks the work for migrating the chunk
  google.longrunning.Operation operation = 1;
}

// Request to unload chunk from read buffer but keep it in object store
message UnloadPartitionChunkRequest {
  // the name of the database
  string db_name = 1;

  // the partition key
  string partition_key = 2;

  // the table name
  string table_name = 4;

  // Was uint32-based chunk ID.
  reserved 3;

  // the chunk id
  //
  // UUID is stored as 16 bytes in big-endian order.
  bytes chunk_id = 5;
}

message UnloadPartitionChunkResponse {
}

// Request to unload chunk from read buffer but keep it in object store
message LoadPartitionChunkRequest {
  // the name of the database
  string db_name = 1;

  // the partition key
  string partition_key = 2;

  // the table name
  string table_name = 3;

  // the chunk id
  //
  // UUID is stored as 16 bytes in big-endian order.
  bytes chunk_id = 4;
}

message LoadPartitionChunkResponse {
  // The operation that tracks the work for loading the chunk
  google.longrunning.Operation operation = 1;
}

message GetServerStatusRequest {}
message GetServerStatusResponse {
  // Server status.
  ServerStatus server_status = 1;
}

message ServerStatus {
  // Server is initialized, i.e. databases are loaded and accept read/write operations. Furthermore database rules can
  // be updaded and new databases can be created.
  bool initialized = 1;

  // If present, the server reports a global error condition.
  Error error = 2;

  // If `initialized` is true, this contains a complete list of databases.
  repeated DatabaseStatus database_statuses = 3;
}

message DatabaseStatus {
  // The name of the database.
  string db_name = 1;

  // If present, the database reports an error condition.
  Error error = 2;

  // Current initialization state of the database.
  enum DatabaseState {
    DATABASE_STATE_UNSPECIFIED = 0;

    // Database is known but nothing is loaded.
    DATABASE_STATE_KNOWN = 1;

    // Database object storage has been found
    DATABASE_STATE_DATABASE_OBJECT_STORE_FOUND = 8;

    // No active database
    DATABASE_STATE_NO_ACTIVE_DATABASE = 10;

    // Database owner info has been loaded
    DATABASE_STATE_OWNER_INFO_LOADED = 11;

    // Rules are loaded
    DATABASE_STATE_RULES_LOADED = 2;

    // Catalog is loaded but data from sequencers / write buffers is not yet replayed.
    DATABASE_STATE_CATALOG_LOADED = 3;

    // Fully initialized database.
    DATABASE_STATE_INITIALIZED = 4;

    // Error loading rules
    DATABASE_STATE_RULES_LOAD_ERROR = 5;

    // Error loading owner info
    DATABASE_STATE_OWNER_INFO_LOAD_ERROR = 12;

    // Error during catalog load
    DATABASE_STATE_CATALOG_LOAD_ERROR = 6;

    // Error during write buffer creation
    DATABASE_STATE_WRITE_BUFFER_CREATION_ERROR = 13;

    // Error during replay
    DATABASE_STATE_REPLAY_ERROR = 7;

    // Error encountered finding the database's directory in object storage
    DATABASE_STATE_DATABASE_OBJECT_STORE_LOOKUP_ERROR = 9;
  }

  // Current initialization state of the database.
  DatabaseState state = 3;

  // The UUID of the database, if known
  optional bytes uuid = 4;
}

message Error {
  // Message describing the error.
  string message = 1;
}

// Request to wipe preserved catalog.
message WipePreservedCatalogRequest {
  // the name of the database
  string db_name = 1;
}

message WipePreservedCatalogResponse {
  // The operation that tracks the work for wiping the catalog.
  google.longrunning.Operation operation = 1;
}

// Request to rebuild preserved catalog.
message RebuildPreservedCatalogRequest {
  // the name of the database
  string db_name = 1;

  // force the catalog to be rebuilt, even if the database has started
  // successfully
  bool force = 2;
}

message RebuildPreservedCatalogResponse {
  // The operation that tracks the work for rebuilding the catalog.
  google.longrunning.Operation operation = 1;
}

// Request to skip replay.
message SkipReplayRequest {
  // the name of the database
  string db_name = 1;
}

message SkipReplayResponse {
}

// Request to persist given partition.
message PersistPartitionRequest {
  // the name of the database
  string db_name = 1;

  // the partition key
  string partition_key = 2;

  // the table name
  string table_name = 3;

  // persist all data for partition irrespective of arrival time
  bool force = 4;
}

message PersistPartitionResponse {
}

// Request to drop partition from memory and (if persisted) from object store.
message DropPartitionRequest {
  // the name of the database
  string db_name = 1;

  // the partition key
  string partition_key = 2;

  // the table name
  string table_name = 3;
}

message DropPartitionResponse {
}

// Request to commpact given object store chunks
message CompactObjectStoreChunksRequest {
  // the name of the database
  string db_name = 1;

  // the partition key
  string partition_key = 2;

  // the table name
  string table_name = 3;

  // the chunk ids
  repeated bytes chunk_ids = 4;
}

message CompactObjectStoreChunksResponse {
  // The operation that tracks the work for compacting object store chunks
  google.longrunning.Operation operation = 1;
}

// Request to commpact all object store of a given partition
message CompactObjectStorePartitionRequest {
  // the name of the database
  string db_name = 1;

  // the partition key
  string partition_key = 2;

  // the table name
  string table_name = 3;
}

message CompactObjectStorePartitionResponse {
  // The operation that tracks the work for compacting object store chunks
  google.longrunning.Operation operation = 1;
}
